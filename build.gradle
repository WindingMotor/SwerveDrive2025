plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id "com.diffplug.spotless" version "6.12.0"
    id "org.jetbrains.dokka" version "1.9.20"
    id "com.peterabeles.gversion" version "1.10"
    id "org.ysb33r.doxygen" version "1.0.3"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false
def includeDesktopSupport = false

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

repositories {
    mavenCentral()

        maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}
configurations.all {
    exclude group: "edu.wpi.first.wpilibj"
}

task(checkAkitInstall, dependsOn: "classes", type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.CheckInstall"
    classpath = sourceSets.main.runtimeClasspath
}
compileJava.finalizedBy checkAkitInstall


compileKotlin {
    kotlinOptions {
        jvmTarget = '17'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '17'
    }
}

project.compileKotlin.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
            exclude '**/*.kt'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader("// Copyright (c) 2024 : FRC 2106 : The Junkyard Dogs\n// https://github.com/WindingMotor\n// https://www.team2106.org\n\n// Use of this source code is governed by an MIT-style\n// license that can be found in the LICENSE file at\n// the root directory of this project.\n\n")
        indentWithTabs(2)
    }
}

project.compileTestKotlin.dependsOn(spotlessApply)
spotless {
    kotlin {
        target fileTree(".") {
            include "**/*.kt"
            exclude "**/build/**", "**/build-*/**"
        }
        ktlint()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader("// Copyright (c) 2024 : FRC 2106 : The Junkyard Dogs\n// https://github.com/WindingMotor\n// https://www.team2106.org\n\n// Use of this source code is governed by an MIT-style\n// license that can be found in the LICENSE file at\n// the root directory of this project.\n\n")
        indentWithTabs(2)
    }
}

task updateVendordeps(type: Exec) {
    workingDir "${rootDir}/tools"
    commandLine './vendor_wizard.sh', 'update', '--gradle'
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue = true

    doLast {
        def output = standardOutput.toString()
        def errorOutput = errorOutput.toString()
        println output
        println errorOutput
    }
}

tasks.build.dependsOn updateVendordeps

project.compileJava.dependsOn(createVersionFile)
gversion {
  srcDir       = "src/main/java/"
  classPackage = "frc.robot"
  className    = "BuildConstants"
  dateFormat   = "yyyy-MM-dd HH:mm:ss z"
  timeZone     = "America/New_York"
  indent       = "  "
}


doxygen {
    source = fileTree(dir: "src/main/java")
    outputDir = file("$buildDir/docs/doxygen")
    option 'generate_html', true
    option 'generate_treeview', true
    option 'disable_index', false
    option 'html_extra_stylesheet', 'build/docs/doxygen-awesome.css'
    option 'html_colorstyle', 'dark'

}

task openDocs(dependsOn: doxygen) {
    doLast {
        def docPath = "${buildDir}/docs/doxygen/html/index.html"
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        
        if (isWindows) {
            exec {
                commandLine 'cmd', '/c', "start ${docPath}"
            }
        } else {
            exec {
                commandLine 'xdg-open', docPath
            }
        }
    }
}